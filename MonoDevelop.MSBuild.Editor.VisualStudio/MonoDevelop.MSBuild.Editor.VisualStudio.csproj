<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <TargetFramework>net48</TargetFramework>
    <MinimumVisualStudioVersion>17.6</MinimumVisualStudioVersion>
    <GeneratePkgDefFile>true</GeneratePkgDefFile>
    <UseCodebase>true</UseCodebase>
    <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer>
    <IncludeDebugSymbolsInVSIXContainer>false</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>false</IncludeDebugSymbolsInLocalVSIXDeployment>
    <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>
    <!-- copying the lock file assemblies is pointless and makes it unclear what's being included in the vsix -->
    <CopyLocalLockFileAssemblies>false</CopyLocalLockFileAssemblies>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

 <PropertyGroup Condition="!$([MSBuild]::IsOSPlatform('Windows'))">
    <GeneratePkgDefFile>false</GeneratePkgDefFile>
    <CreateVsixContainer>false</CreateVsixContainer>
 </PropertyGroup>

  <!-- deploy and run the extension in VS -->
  <PropertyGroup>
    <StartAction>Program</StartAction>
    <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
    <StartArguments>/rootsuffix Exp</StartArguments>
    <DeployExtension Condition="'$(VisualStudioVersion)' != '17.0' OR '$(BuildingInsideVisualStudio)' != 'true'">False</DeployExtension>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="..\art\icon.png" Link="Resources\icon.png" IncludeInVSIX="True" />
    <Content Include="..\LICENSE" Link="Resources\LICENSE" IncludeInVSIX="True" />
  </ItemGroup>
  <ItemGroup>
    <ProjectCapability Include="ExtensibilityProjectExtension" />
  </ItemGroup>
  <ItemGroup>
    <Page Remove="Properties\DesignTimeResources.xaml" />
    <None Include="Properties\DesignTimeResources.xaml" ContainsDesignTimeResources="true" />
    <Page Remove="Options\OptionsResources.xaml" />
    <Resource Include="Options\OptionsResources.xaml" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="..\msbuild-editor-vscode\syntaxes\msbuild.tmLanguage.json" IncludeInVSIX="true" Link="Grammars\msbuild.json" />
    <None Include="..\msbuild-editor-vscode\syntaxes\OSSREADME.json" Link="Grammars\OSSREADME.json" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Community.VisualStudio.Toolkit.17" />
    <PackageReference Include="Microsoft.VisualStudio.ImageCatalog" />
    <PackageReference Include="Microsoft.VisualStudio.LanguageServices" />
    <PackageReference Include="Microsoft.VisualStudio.SDK" />
    <PackageReference Include="Microsoft.VSSDK.BuildTools" />
    <PackageReference Include="NuGet.VisualStudio" />
    <PackageReference Include="Microsoft.ApplicationInsights" />
    <PackageReference Include="Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel" />
    <PackageReference Include="Markdig.Signed" PrivateAssets="runtime" />
    <!-- resolve conflicts -->
    <PackageReference Include="Microsoft.CodeAnalysis" />
    <PackageReference Include="Microsoft.CodeAnalysis.Common" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" />
    <PackageReference Include="Microsoft.VisualStudio.TemplateWizardInterface" />
    <PackageReference Include="Microsoft.VisualStudio.CoreUtility" />
    <PackageReference Include="Microsoft.VisualStudio.Text.Data" />
    <PackageReference Include="Microsoft.VisualStudio.Text.Logic" />
    <PackageReference Include="Microsoft.VisualStudio.Composition" />
    <PackageReference Include="PropertyChanged.SourceGenerator" />
    <PackageReference Include="Newtonsoft.Json" />
    <PackageReference Include="Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\MonoDevelop.MSBuild.Editor\MonoDevelop.MSBuild.Editor.csproj">
      <Project>{17e0fe72-b6d9-4187-bd80-d8a27bc74533}</Project>
      <Name>MonoDevelop.MSBuild.Editor</Name>
      <IncludeOutputGroupsInVSIX>BuiltProjectOutputGroup%3bBuiltProjectOutputGroupDependencies%3bGetCopyToOutputDirectoryItems%3bSatelliteDllsProjectOutputGroup%3b</IncludeOutputGroupsInVSIX>
      <IncludeOutputGroupsInVSIXLocalOnly>DebugSymbolsProjectOutputGroup%3b</IncludeOutputGroupsInVSIXLocalOnly>
    </ProjectReference>
    <ProjectReference Include="..\MonoDevelop.MSBuild\MonoDevelop.MSBuild.csproj">
      <Project>{E30D9BF7-2840-4274-A8A6-58D34295C6C8}</Project>
      <Name>MonoDevelop.MSBuild</Name>
      <IncludeOutputGroupsInVSIX>BuiltProjectOutputGroup%3bBuiltProjectOutputGroupDependencies%3bGetCopyToOutputDirectoryItems%3bSatelliteDllsProjectOutputGroup%3b</IncludeOutputGroupsInVSIX>
      <IncludeOutputGroupsInVSIXLocalOnly>DebugSymbolsProjectOutputGroup%3b</IncludeOutputGroupsInVSIXLocalOnly>
    </ProjectReference>
    <ProjectReference Include="..\MonoDevelop.Xml\Editor\MonoDevelop.Xml.Editor.csproj">
      <Project>{563FFDF7-0739-42DF-B987-B804A26D1E0B}</Project>
      <Name>MonoDevelop.Xml.Editor</Name>
      <IncludeOutputGroupsInVSIX>BuiltProjectOutputGroup%3bBuiltProjectOutputGroupDependencies%3bGetCopyToOutputDirectoryItems%3bSatelliteDllsProjectOutputGroup%3b</IncludeOutputGroupsInVSIX>
      <IncludeOutputGroupsInVSIXLocalOnly>DebugSymbolsProjectOutputGroup%3b</IncludeOutputGroupsInVSIXLocalOnly>
    </ProjectReference>
    <ProjectReference Include="..\MonoDevelop.Xml\Core\MonoDevelop.Xml.Core.csproj">
      <Project>{87DE05FC-4B18-4C21-8AA5-237CB5B97780}</Project>
      <Name>MonoDevelop.Xml.Core</Name>
      <IncludeOutputGroupsInVSIX>BuiltProjectOutputGroup%3bBuiltProjectOutputGroupDependencies%3bGetCopyToOutputDirectoryItems%3bSatelliteDllsProjectOutputGroup%3b</IncludeOutputGroupsInVSIX>
      <IncludeOutputGroupsInVSIXLocalOnly>DebugSymbolsProjectOutputGroup%3b</IncludeOutputGroupsInVSIXLocalOnly>
    </ProjectReference>
  </ItemGroup>

  <!-- Microsoft.VsSDK.targets must be imported after the SDK targets -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <!-- only import these if they exist as they come from NuGet and won't exist before a restore -->
  <PropertyGroup>
    <VSSDKTargets Condition="'$(VSToolsPath)'!=''">$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets</VSSDKTargets>
  </PropertyGroup>
  <Import Project="$(VSSDKTargets)" Condition="Exists('$(VSSDKTargets)')" />
  <Target Name="AddVersionToVsix" BeforeTargets="CreateVsixContainer" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <TargetVsixContainer>$([System.IO.Path]::ChangeExtension('$(TargetVsixContainer)', '$(BuildVersion).vsix'))</TargetVsixContainer>
    </PropertyGroup>
  </Target>
  <Target Name="AddPackageRefAsmsToVsix" AfterTargets="GetVsixSourceItems">
    <ItemGroup>
      <VSIXSourceItem Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == 'Microsoft.ApplicationInsights'" />
      <VSIXSourceItem Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == 'Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel'" />
      <VSIXSourceItem Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == 'Markdig.Signed'" />
      <VSIXSourceItem Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == 'Microsoft.Extensions.Logging.Abstractions'" />
      <VSIXSourceItem Include="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NuGetPackageId)' == 'System.Collections.Immutable'" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <EmbeddedResource Update="@(EmbeddedResource)" XStronglyTypedLanguage="CSharp" XStronglyTypedClassName="%(FileName)" XStronglyTypedNamespace="MonoDevelop.MSBuild.Editor.VisualStudio" Generator="MSBuild:Compile" XStronglyTypedFileName="$(IntermediateOutputPath)MonoDevelop.MSBuild.Editor.VisualStudio.%(FileName).g.cs" PublicClass="true" />
  </ItemGroup>

  <!--
  https://github.com/dotnet/msbuild/issues/4751-->
  <!--
  NOTE: this causes some kind of recursive build overflow with the WPF targets
  <PropertyGroup>
    <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>
  -->
  <!--
  Work around the WPF resgen ordering issue by wiring in an additional resgen target just to generate the resx .g.cs files.
  It nay not produce accurate resources as it runs before the resource preparation targets, so it discards the compiled resources.
  However, it should be close enough to generate the source files we need.
  -->
  <Target Name="GenerateStronglyTypesResourceClasses" BeforeTargets="CoreCompile">
    <GenerateResource Sources="@(EmbeddedResource)" UseSourcePath="$(UseSourcePath)" References="@(ReferencePathWithRefAssemblies)" AdditionalInputs="$(MSBuildAllProjects)" NeverLockTypeAssemblies="$(GenerateResourceNeverLockTypeAssemblies)" StronglyTypedClassName="%(EmbeddedResource.XStronglyTypedClassName)" StronglyTypedFileName="%(EmbeddedResource.XStronglyTypedFileName)" StronglyTypedLanguage="%(EmbeddedResource.XStronglyTypedLanguage)" StronglyTypedNamespace="%(EmbeddedResource.XStronglyTypedNamespace)" StronglyTypedManifestPrefix="%(EmbeddedResource.XStronglyTypedManifestPrefix)" PublicClass="%(EmbeddedResource.PublicClass)" OutputResources="@(EmbeddedResource->'$(IntermediateOutputPath)%(ManifestResourceName).IGNORE.resources')" Condition="'%(EmbeddedResource.XStronglyTypedFileName)' !=''" SdkToolsPath="$(ResgenToolPath)" ExecuteAsTool="$(ResGenExecuteAsTool)" EnvironmentVariables="$(ResGenEnvironment)" MSBuildRuntime="$(GenerateResourceMSBuildRuntime)" MSBuildArchitecture="$(GenerateResourceMSBuildArchitecture)">
      <Output TaskParameter="FilesWritten" ItemName="FileWrites" />
      <Output TaskParameter="StronglyTypedFileName" ItemName="Compile" />
    </GenerateResource>
  </Target>
</Project>
