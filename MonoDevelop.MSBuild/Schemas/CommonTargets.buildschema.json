{
  "license": "Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.",
  "items": {
    "Reference": {
      "description": "Reference to an assembly",
      "includeDescription": "assembly names or filenames",
      "type": "file",
      "metadata": {
        "HintPath": {
          "description": "Relative or absolute path to the assembly",
          "type": "file",
          "isList": true
        },
        "Name": "Friendly display name",
        "FusionName": "Fusion name of the assembly",
        "SpecificVersion": {
          "description": "Whether only the version in the fusion name should be referenced",
          "type": "bool"
        },
        "Aliases": "Aliases for the reference",
        "Private": {
          "description": "Whether the reference should be copied to the output folder",
          "type": "bool"
        },
        "EmbedInteropTypes": {
          "description": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only",
          "type": "bool",
          "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/inputs#embedinteroptypes"
        },
        "RequiredTargetFramework": {
          "description": "The minimum required target framework version in order to use this assembly as a reference",
          "type": "target-framework-version"
        }
      },
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/inputs#references"
    },
    "SDKReference": {
      "description": "Reference to a Windows 8.1 extension SDK",
      "includeDescription": "SDK name and version monikers",
      "metadata": {
        "Name": "Friendly display name (optional)"
      }
    },
    "COMReference": {
      "type": "file",
      "description": "Reference to a COM component",
      "includeDescription": "COM component names",
      "metadata": {
        "Name": "Friendly display name (optional)",
        "Guid": {
          "description": "GUID in the form {00000000-0000-0000-0000-000000000000}",
          "type": { "$ref": "#/types/com-guid" }
        },
        "VersionMajor": {
          "description": "Major part of the version number",
          "type": "int"
        },
        "VersionMinor": {
          "description": "Minor part of the version number",
          "type": "int"
        },
        "Lcid": {
          "description": "Locale ID",
          "type": "lcid"
        },
        "WrapperTool": "Wrapper tool, such as tlbimp",
        "Isolated": {
          "description": "Whether it is isolated",
          "type": "bool"
        },
        "EmbedInteropTypes": {
          "description": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional)",
          "type": "bool",
          "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/inputs#embedinteroptypes"
        }
      }
    },
    "COMFileReference": {
      "type": "file",
      "metadata": {
        "WrapperTool": ""
      }
    },
    "PackageReference": {
      "description": "Reference to a NuGet package",
      "includeDescription": "NuGet package IDs",
      "type": "nuget-id",
      "packageType": "Dependency",
      "metadata": {
        "Version": {
          "description": "The version of the NuGet package dependency",
          "type": "nuget-version"
        },
        "NoWarn": {
          "description": "List of disabled NuGet warning codes",
          "isList": true,
          "type": { "$ref": "#/types/nuGetWarningCode" },
          "helpUrl": "https://learn.microsoft.com/nuget/consume-packages/package-references-in-project-files#suppressing-nuget-warnings"
        }
      }
    },
    "DotNetCliToolReference": {
      "description": "The CLI tool that the user wants restored in the context of the project",
      "includeDescription": "tool NuGet package IDs",
      "type": "nuget-id",
      "packageType": "DotnetCliTool",
      "metadata": {
        "Version": {
          "description": "The version of the NuGet package dependency",
          "type": "nuget-version"
        }
      }
    },
    "ProjectConfiguration": {
      "description": "Defines a Configuration|Platform combination that may be used to build this project",
      "metadata": {
        "Configuration": {
          "description": "The configuration part of the project configuration",
          "type": "configuration",
          "isRequired": true
        },
        "Platform": {
          "description": "The platform part of the project configuration",
          "type": "platform",
          "isRequired": true
        }
      }
    },
    "NativeReference": {
      "description": "Reference to a native manifest file, or to a file that contains a native manifest",
      "includeDescription": "reference names",
      "type": "file",
      "metadata": {
        "Name": "Base name of manifest file",
        "HintPath": "Relative path to manifest file"
      }
    },
    "ProjectReference": {
      "description": "Reference to another project",
      "includeDescription": "project file paths",
      "type": "file",
      "metadata": {
        "Name": "Friendly display name",
        "Project": {
          "description": "Project GUID, in the form {00000000-0000-0000-0000-000000000000}",
          "type": { "$ref": "#/types/project-guid" }
        },
        "ReferenceOutputAssembly": {
          "description": "Whether the outputs of the project referenced should be passed to the compiler",
          "type": "bool",
          "defaultValue": "true"
        },
        "SpecificVersion": {
          "description": "Whether the exact version of the assembly should be used",
          "type": "bool",
          "defaultValue": "true"
        },
        "Targets": {
          "description": "Semicolon separated list of targets in the referenced projects that should be built. Default is the value of `$(ProjectReferenceBuildTargets)` whose default is blank, indicating the default targets.",
          "type": "target-name",
          "isList": true
        },
        "OutputItemType": {
          "description": "Item type to emit target outputs into. Default is blank. If the Reference metadata is set to `true` (default) then target outputs will become references for the compiler.",
          "type": "item-name"
        },
        "Package": "",
        "EmbedInteropTypes": {
          "description": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only",
          "type": "bool",
          "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/inputs#embedinteroptypes"
        },
        "ProduceReferenceAssembly": {
          "description": "Whether to produce a separate reference assembly in addition to the runtime assembly",
          "type": "bool"
        }
      }
    },
    "Compile": {
      "description": "Source files to be passed to the compiler",
      "includeDescription": "source files",
      "type": "file",
      "metadata": {
        "AutoGen": {
          "description": "Whether file was generated from another file",
          "type": "bool"
        },
        "DesignTime": "",
        "DesignTimeSharedInput": "",
        "VBMyExtensionTemplateID": ""
      }
    },
    "EmbeddedResource": {
      "description": "Resources to be embedded in the generated assembly",
      "includeDescription": "resource files",
      "type": "file",
      "metadata": {
        "LogicalName": "Overrides the default resource ID",
        "StronglyTypedFileName": {
          "description": "Specifies a filename into which to generate a strongly-typed resource class. Generally it should be written to a file in `$(IntermediateOutputPath)`. All the `StronglyTyped*` metadata must be set to enable this feature.",
          "type": "file"
        },
        "StronglyTypedLanguage": {
          "description": "Specifies the language use when generating a strongly-typed resource class. All the `StronglyTyped*` metadata must be set to enable this feature.",
          "type": [ "CSharp", "VisualBasic" ]
        },
        "StronglyTypedNamespace": {
          "description": "Specifies the namespace to use when generating a strongly-typed resource class. All the `StronglyTyped*` metadata must be set to enable this feature.",
          "type": "clr-namespace"
        },
        "StronglyTypedClassName": {
          "description": "Specifies the class name to use when generating a strongly-typed resource class. All the `StronglyTyped*` metadata must be set to enable this feature.",
          "type": "clr-type-name"
        }
      }
    },
    "Content": {
      "description": "Files that are not compiled, but may be embedded or published",
      "includeDescription": "content files",
      "type": "file",
      "metadata": {
        "CopyToPublishDirectory": {
          "description": "Whether to copy the file to the publish directory",
          "type": {
            "values": {
              "Never": "Do not copy the file",
              "Always": "Always copy the file",
              "PreserveNewest": "Copy the file if it is newer than the existing copy"
            }
          },
          "defaultValue": "Never"
        },
        "IsAssembly": "",
        "PublishState": {
          "type": { "$ref": "#/types/publishState" },
          "defaultValue": "Default"
        }
      }
    },
    "Page": {
      "description": "XAML files that are converted to binary and compiled into the assembly",
      "includeDescription": "XAML files",
      "type": "file"
    },
    "Resource": {
      "description": "Embed a resource file in the compiled assembly",
      "includeDescription": "resource files",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#resources",
      "metadata": {
        "LogicalName": "Overrides the default resource ID"
      }
    },
    "LinkResource": {
      "description": "Create a link to a resource file in the compiled assembly",
      "includeDescription": "resource files",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#linkresources",
      "metadata": {
        "LogicalName": "Overrides the default resource ID"
      }
    },
    "ApplicationDefinition": {
      "description": "XAML file that contains the application definition, only one can be defined",
      "includeDescription": "application definition",
      "type": "file",
      "isSingleton": true
    },
    "None": {
      "description": "Files that should have no role in the build process",
      "type": "file"
    },
    "BaseApplicationManifest": {
      "description": "The base application manifest for the build. Contains ClickOnce security information.",
      "type": "file",
      "isSingleton": true
    },
    "Folder": {
      "description": "Folder on disk to display in the IDE",
      "includeDescription": "folders",
      "type": "folder"
    },
    "Import": {
      "description": "Assemblies whose namespaces should be imported by the Visual Basic compiler",
      "type": "file"
    },
    "WebReferences": {
      "description": "Name of Web References folder to display in user interface",
      "type": "string"
    },
    "WebReferenceUrl": {
      "description": "Represents a reference to a web service",
      "includeDescription": "web service urls",
      "type": "url",
      "metadata": {
        "UrlBehavior": "",
        "RelPath": "",
        "UpdateFromURL": "",
        "ServiceLocationURL": "",
        "CachedDynamicPropName": "",
        "CachedAppSettingsObjectName": "",
        "CachedSettingsPropName": ""
      }
    },
    "FileAssociation": {
      "type": "string",
      "metadata": {
        "DefaultIcon": "",
        "Description": "",
        "Progid": ""
      }
    },
    "BootstrapperFile": {
      "type": "file",
      "isSingleton": true,
      "metadata": {
        "ProductName": "",
        "Install": ""
      }
    },
    "PublishFile": {
      "type": "file",
      "metadata": {
        "PublishState": {
          "type": { "$ref": "#/types/publishState" },
          "defaultValue": "Default"
        },
        "IncludeHash": {
          "type": "bool"
        },
        "IsAssembly": {
          "type": "bool"
        }
      }
    },
    "TargetPlatform": {
      "description": "Target platform in the form of \"[Identifier], Version=[Version]\", for example, \"Windows, Version=8.0\""
    },
    "Analyzer": {
      "description": "An assembly containing diagnostic analyzers",
      "includeDescription": "relative or absolute assembly paths",
      "type": "file"
    },
    "FileWrites": {
      "description": "Files to track for incremental clean",
      "type": "file"
    },
    "UpToDateCheckInput": "Defines an item to be considered an input to the project for the fast up-to-date check.",
    "UpToDateCheckOutput": "Defines an item to be considered an output of the project for the fast up-to-date check.",
    "UpToDateCheckBuilt": {
      "description": "Defines an item to be considered an output of the project for the fast up-to-date check, with optional corresponding input via 'Original' metadata. When 'Original' metadata is specified, the input and output are considered in isolation. Useful when a single file will be copied (and potentially transformed in doing so) during build.",
      "metadata": {
        "Original": "Optional location of the input item that produces this output. Useful when a file is copied (and potentially transformed in doing so) during build. If multiple inputs and/or outputs are involved, use 'Set' metadata instead."
      }
    }
  },
  "properties": {
    "VisualStudioVersion": "The version of Visual Studio into which this project is loaded",
    "MinimumVisualStudioVersion": "The minimum version of Visual Studio required to open this project",
    "AdditionalFileItemNames": "",
    "AllowUnsafeBlocks": {
      "description": "Whether to allow unsafe code",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/language#allowunsafeblocks"
    },
    "AppConfigForCompiler": "",
    "ApplicationIcon": "",
    "ApplicationRevision": "",
    "ApplicationVersion": {
      "type": "version"
    },
    "AppDesignerFolder": {
      "description": "Name of folder for Application Designer",
      "type": "folder"
    },
    "AspNetConfiguration": "",
    "AssemblyName": {
      "description": "Name of output assembly",
      "type": "string"
    },
    "AssemblyOriginatorKeyFile": {
      "description": "The `.snk` or `.pfx` file that contains the key used to sign the assembly",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/security#keyfile"
    },
    "ManifestCertificateThumbprint": "Thumbprint used to locate the deployment manifest signing certificate in the user's certificate store",
    "ManifestKeyFile": {
      "description": "Key file that contains the deployment manifest signing certificate if it's not located in the user's certificate store",
      "type": "file"
    },
    "KeyOriginatorFile": {
      "description": "After the `ResolveKeySource` target runs, the file that contains the key used to sign the assembly, resolved from the `AssemblyOriginatorKeyFile` property",
      "type": "file"
    },
    "KeyContainerName": {
      "description": "After the `ResolveKeySource` target runs, the name of the container of the key used to sign the assembly",
      "type": "file"
    },
    "AutoGenerateBindingRedirects": {
      "description": "Indicates whether BindingRedirect elements should be automatically generated for referenced assemblies.",
      "type": "bool"
    },
    "AutorunEnabled": {
      "type": "bool"
    },
    "BaseAddress": {
      "description": "Explicitly set a preferred base address for loading the dll in decimal, hexadecimal or octal form",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#baseaddress"
    },
    "BootstrapperComponentsLocation": {
      "type": [ "HomeSite", "Relative", "Absolute" ]
    },
    "BootstrapperComponentsUrl": "",
    "BootstrapperEnabled": {
      "type": "bool"
    },
    "CheckForOverflowUnderflow": {
      "description": "Whether the compiler should check for integer overflow and underflow",
      "defaultValue": "false",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/language#checkforoverflowunderflow"
    },
    "CodePage": {
      "description": "The codepage the compiler should use when reading source files",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#codepage"
    },
    "ConsolePause": {
      "description": "Whether the IDE should keep the console open after executing a console application",
      "type": "bool"
    },
    "Configuration": {
      "description": "The configuration that is being used to build the project, for example \"Debug\" or \"Release\"",
      "type": "configuration"
    },
    "ConfigurationName": "",
    "ConfigurationOverrideFile": "",
    "CreateDesktopShortcut": {
      "type": "bool"
    },
    "CreateWebPageOnPublish": {
      "type": "bool"
    },
    "CurrentSolutionConfigurationContents": "",
    "DebugSecurityZoneURL": "",
    "DebugSymbols": {
      "description": "Whether to emit debug symbols",
      "type": "bool",
      "defaultValue": "false"
    },
    "DebugType": {
      "description": "What kind of debug information to emit",
      "type": {
        "values": {
          "none": "No debug information",
          "pdbonly": "Emit Windows-only PDB debug symbols",
          "portable": "Emit portable PDB debug symbols",
          "full": "Emit Windows-only PDB debug symbols",
          "embedded": "Embed portable debug symbols in the assembly"
        }
      },
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/code-generation#debugtype"
    },
    "DefaultClientScript": "",
    "DefaultHTMLPageLayout": "",
    "DefaultTargetSchema": "",
    "DefineConstants": {
      "description": "Conditional compiler defines",
      "type": "string",
      "isList": true,
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/language#defineconstants"
    },
    "DelaySign": {
      "description": "Reserve space for a signature so the assembly can be signed later",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/security#delaysign"
    },
    "DisallowUrlActivation": {
      "type": "bool"
    },
    "ConfigurationType": "",
    "DeployDirSuffix": "",
    "DisableFastUpToDateCheck": {
      "description": "Whether Visual Studio should do its own faster up-to-date check before Building, rather than invoke MSBuild to do a possibly more accurate one. You would set this to false if you have a heavily customized build process and builds in Visual Studio are not occurring when they should.",
      "type": "bool"
    },
    "DocumentationFile": {
      "description": "Filename for the xml documentation file",
      "type": "string",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/output#documentationfile"
    },
    "EnableASPDebugging": "",
    "EnableASPXDebugging": "",
    "EnableSQLServerDebugging": "",
    "EnableSecurityDebugging": "",
    "EnableUnmanagedDebugging": "",
    "ErrorLog": {
      "description": "Specifiy a file to which the compiler should log all errors and warnings",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#errorlog"
    },
    "ErrorReport": {
      "description": "Reporting behavior for internal compiler errors",
      "type": {
        "values": {
          "prompt": "Open a dialog asking whether you want to report the internal compiler error",
          "queue": "Queue the internal compiler error reports and prompt you later",
          "send": "Automatically report the internal compiler error to Microsoft",
          "none": "Do not report internal compiler error"
        }
      },
      "defaultValue": "none"
    },
    "EmbedManifest": "",
    "ErrorReportUrl": "",
    "ExcludeDeploymentUrl": {
      "type": "bool"
    },
    "ExcludedPermissions": "",
    "FallbackCulture": "",
    "FileAlignment": {
      "description": "Override the boundary on which the compiler aligns sections of the output assembly",
      "defaultValue": "512",
      "type": [ "512", "1024", "2048", "4096", "8192" ],
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#filealignment"
    },
    "FileUpgradeFlags": "",
    "FormFactorID": "",
    "FrameworkPathOverride": {
      "description": "Overrides the path to the target framework"
    },
    "GenerateManifests": "",
    "GenerateLibraryLayout": {
      "type": "bool"
    },
    "DisableXbfGeneration": {
      "type": "bool"
    },
    "SuppressXamlWarnings": "",
    "XamlRootsLog": "",
    "XamlSavedStateFilePath": "",
    "GenerateSerializationAssemblies": "",
    "HostInBrowser": {
      "type": "bool"
    },
    "IgnoreImportLibrary": {
      "type": "bool"
    },
    "Install": "",
    "InstallFrom": {
      "type": [ "Web", "Unc", "Disk" ]
    },
    "InstallUrl": "",
    "IsCodeSharingProject": {
      "type": "bool"
    },
    "IsWebBootstrapper": "",
    "Keyword": "",
    "Prefer32Bit": {
      "description": "Mark the executable as preferring to run on a 32-bit runtime when on a 64-bit OS",
      "type": "bool",
      "defaultValue": "false"
    },
    "HighEntropyVA": {
      "description": "Mark the executable as able to run with Address Space Layout Randomization (ASLR) enabled",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/security#highentropyva"
    },
    "MapFileExtensions": "",
    "MinimumRequiredVersion": {
      "type": "version"
    },
    "NoConfig": "",
    "NoStdLib": {
      "description": "Whether to disable automatic referencing of standard libraries such as mscorlib",
      "type": "bool",
      "defaultValue": "false"
    },
    "NoWarn": {
      "description": "List of disabled warning codes",
      "isList": true,
      "type": "warning-code",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#nowarn"
    },
    "OldToolsVersion": "",
    "OutDir": {
      "description": "The output directory",
      "type": "folder"
    },
    "OpenBrowserOnPublish": {
      "type": "bool"
    },
    "Optimize": {
      "description": "Whether the compiler should optimize the output",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/code-generation#optimize"
    },
    "OSVersion": "",
    "OutputPath": {
      "description": "Path to output folder, with trailing slash",
      "type": "folder-with-slash"
    },
    "OutputType": {
      "description": "The type of output from the compiler, such as an executable or library",
      "type": {
        "values": {
          "Exe": "A console executable",
          "Library": "A library",
          "Module": "A .NET module",
          "WinExe": "A Windows executable",
          "winmdobj": "An intermediate `.winmdobj` file",
          "appcontainerexe": "An executable for Windows Store 8.x apps"
        }
      },
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/output#targettype"
    },
    "PackageTargetFallback": "Allows packages using alternative monikers to be referenced in this project, which include older (e.g. dnxcore50, dotnet5.x) and Portable Class Library names",
    "Platform": {
      "description": "The platform that is being used to build the project, for example \"AnyCPU\" or \"x86\"",
      "type": "platform"
    },
    "PlatformName": "",
    "PlatformFamilyName": "",
    "PlatformID": "",
    "PlatformTarget": {
      "description": "The platform that the executable targets",
      "type": {
        "values": {
          "anycpu": "Runs on a 64-bit runtime if available, else 32-bit",
          "anycpu32bitpreferred": "Runs on a 32-bit runtime if available, else 64-bit",
          "ARM": "Only runs on ARM processors",
          "x64": "Only runs on a 64-bit runtime on x86 processors",
          "x86": "Only runs on a 32-bit runtime on x86 processors",
          "Itanium": "Only runs on Itanium processors"
        }
      },
      "defaultValue": "anycpu",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/output#platformtarget"
    },
    "PlatformToolset": "",
    "PostBuildEvent": "Command line to be run at the end of build",
    "PreBuildEvent": "Command line to be run at the start of build",
    "PreserveCompilationContext": {
      "description": "Value indicating whether reference assemblies can be used in dynamic compilation",
      "type": "bool"
    },
    "ProductName": "",
    "ProductVersion": "",
    "ProjectType": "",
    "PublisherName": "",
    "PublishUrl": "",
    "RecursePath": "",
    "ReferencePath": {
      "description": "Semi-colon separated list of folders to search during reference resolution",
      "type": "folder",
      "isList": true
    },
    "RegisterForComInterop": "",
    "RemoteDebugEnabled": "",
    "RemoteDebugMachine": "",
    "RemoveIntegerChecks": "",
    "RepositoryType": "The type of the repository where the project is stored (e.g. git)",
    "RepositoryUrl": {
      "description": "The URL for the repository where the project is stored. If set, this may be exposed in publishable build artifacts. Instead of defining this explicitly, consider setting `PublishRepositoryUrl` to `true` to use the `PrivateRepositoryUrl` value supplied by the CI server.",
      "type": "url"
    },
    "PrivateRepositoryUrl": {
      "description": "The URL for the repository where the project is stored. This should be treated as private and not exposed in publishable build artifacts unless `PublishRepositoryUrl` is `true`.",
      "type": "url"
    },
    "PublishRepositoryUrl": {
      "type": "bool",
      "description": "Whether to expose the `PrivateRepositoryUrl` in publishable build artifacts when the `RepositoryUrl` value is not explicitly defined"
    },
    "ResponseFile": "",
    "RootNamespace": {
      "description": "The root namespace to use for new files",
      "type": "clr-namespace"
    },
    "RuntimeIdentifier": {
      "description": "Runtime identifier supported by the project (e.g. win10-x64)",
      "type": "runtime-id"
    },
    "RuntimeIdentifiers": {
      "description": "Semi-colon separated list of runtime identifiers supported by the project (e.g. win10-x64;osx.10.11-x64;ubuntu.16.04-x64)",
      "type": "runtime-id",
      "isList": true
    },
    "SccProjectName": "",
    "SccLocalPath": "",
    "SccProvider": "",
    "RunCodeAnalysis": {
      "description": "Indicates whether to run Code Analysis during the build",
      "type": "bool"
    },
    "RunPostBuildEvent": "",
    "SchemaVersion": "",
    "SecureScoping": "",
    "SignAssembly": {
      "description": "Whether to sign the assembly",
      "type": "bool"
    },
    "SignManifests": "",
    "StartAction": "",
    "StartArguments": "",
    "StartPage": "",
    "StartProgram": "",
    "StartURL": "",
    "StartWithIE": "",
    "StartWorkingDirectory": "",
    "StartupObject": {
      "description": "Type that contains the main entry point method",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#mainentrypoint-or-startupobject"
    },
    "SuiteName": "",
    "SupportUrl": "",
    "TargetCulture": "",
    "TargetFramework": {
      "description": "Short moniker of the framework that this project targets, e.g. `netstandard2.0`",
      "type": "target-framework",
      "helpUrl": "https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#targetframework"
    },
    "TargetFrameworks": {
      "description": "List of short monikers for the frameworks that this project targets, for example `netstandard2.0;net461)`",
      "type": "target-framework",
      "isList": true,
      "helpUrl": "https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#targetframeworks"
    },
    "TargetFrameworkIdentifier": {
      "description": "The identity of framework that this project targets, for example `.NETFramework`",
      "type": "target-framework-identifier"
    },
    "TargetFrameworkVersion": {
      "description": "The version of the framework that this project targets, for example `v4.0`",
      "type": "target-framework-version"
    },
    "TargetFrameworkProfile": {
      "description": "The profile of the framework that this project targets, for example `Profile259`",
      "type": "target-framework-profile"
    },
    "TargetFrameworkMoniker": {
      "description": "The full moniker for of the framework that this project targets, combining the identifier, version and profile",
      "type": "target-framework-moniker"
    },
    "TargetPlatformIdentifier": "",
    "TargetPlatformVersion": "",
    "TargetZone": "",
    "TreatWarningsAsErrors": {
      "description": "Whether to treat warnings as errors",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#treatwarningsaserrors"
    },
    "TrustUrlParameters": "",
    "TypeComplianceDiagnostics": "",
    "UICulture": {
      "type": "lcid"
    },
    "UpgradeBackupLocation": "",
    "UpdateEnabled": {
      "type": "bool"
    },
    "UpdateInterval": {
      "type": "int"
    },
    "UpdateIntervalUnits": {
      "type": [
        "Hours",
        "Days",
        "Weeks"
      ]
    },
    "UpdateMode": {
      "type": [
        "Foreground",
        "Background"
      ]
    },
    "UpdatePeriodically": {
      "type": "bool"
    },
    "UpdateRequired": {
      "type": "bool"
    },
    "UpdateUrl": {
      "type": "url"
    },
    "UseAppConfigForCompiler": {
      "type": "bool"
    },
    "UseApplicationTrust": "",
    "UseVSHostingProcess": "",
    "UTF8Output": {
      "description": "Whether the compile should use UTF8 encoding for its console output",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/advanced#utf8output"
    },
    "VSTO_TrustAssembliesLocation": "",
    "WarningLevel": {
      "description": "What level of warnings the compiler should emit, between 0 and 4 inclusive",
      "type": "int",
      "defaultValue": "4",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#warninglevel"
    },
    "WarningsAsErrors": {
      "description": "List of warning codes to treat as errors",
      "isList": true,
      "type": "warning-code",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#warningsaserrors-and-warningsnotaserrors"
    },
    "WarningsNotAsErrors": {
      "description": "List of warnings codes that should still be treated as warnings when `TreatWarningsAsErrors` is enabled",
      "isList": true,
      "type": "warning-code",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/errors-warnings#warningsaserrors-and-warningsnotaserrors"
    },
    "WebPage": "",
    "Win32Resource": {
      "description": "A Win32 resource file to embed into the compiler output",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#win32resource"
    },
    "Win32Manifest": {
      "description": "A custom Win32 application manifest for the compiled assembly",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#win32manifest"
    },
    "NoWin32Manifest": {
      "description": "Configure the compiler not to embed a default Win32 manifest in the compiled assembly",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#nowin32manifest"
    },
    "Win32Icon": {
      "description": "A `.ico` icon file to be inserted into the compiled assembly to customize its appearance in File Explorer",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options/resources#win32icon"
    },
    "TargetPath": {
      "description": "Absolute path of the project's primary output",
      "type": "file"
    },
    "TargetName": {
      "description": "Base name of the project's primary output",
      "type": "string"
    },
    "TargetExt": {
      "description": "File extension of the project's primary output",
      "type": "extension"
    },
    "TargetDir": {
      "description": "Directory path of the project's primary output",
      "type": "folder-with-slash"
    },
    "ProjectDir": {
      "description": "Directory containing the root project",
      "type": "folder-with-slash"
    },
    "ProjectFileName": {
      "description": "Name of the project, formed by appending the extension to the base name",
      "type": "string"
    },
    "ProjectExt": {
      "description": "File extension of the project",
      "type": "extension"
    },
    "ProjectName": {
      "description": "Base name of the project",
      "type": "string"
    },
    "ProjectPath": {
      "description": "Absolute path of the project",
      "type": "file"
    },
    "SolutionDir": {
      "description": "The directory containing the solution file",
      "type": "folder-with-slash"
    },
    "SolutionName": {
      "description": "Base name of the solution file, without its extension",
      "type": "string"
    },
    "SolutionExt": {
      "description": "The extension of the solution file",
      "type": "string"
    },
    "SolutionFileName": {
      "description": "Name of the solution file, formed by appending the extension to the base name",
      "type": "string"
    },
    "SolutionPath": {
      "description": "Absolute path of the solution file",
      "type": "file"
    },
    "DefaultLanguageSourceExtension": {
      "description": "The default extension for source files",
      "type": "extension"
    },
    "BaseOutputPath": {
      "description": "The base directory for build outputs. The build outputs will be in a configuration-specific subdirectory.",
      "type": "folder"
    },
    "BaseIntermediateOutputPath": {
      "description": "The base directory for intermediate build outputs. The build output will be in a configuration-specific subdirectory.",
      "type": "folder"
    },
    "IntermediateOutputPath": {
      "description": "The configuration-specific directory in which intermediate build outputs are stored",
      "type": "folder"
    },
    "ExternalConsole": {
      "description": "Whether to close the external console after running a console application in the IDE",
      "type": "bool"
    },
    "Configurations": {
      "description": "The values that the IDE should list for the `$(Configuration)` property",
      "type": "configuration",
      "isList": true
    },
    "Platforms": {
      "description": "The values that the IDE should list for the `$(Platform)` property",
      "type": "platform",
      "isList": true
    },
    "AssemblySearchPaths": {
      "description": "Semicolon-delimited ordered list of paths to search when the ResolveAssemblyReference task looks for an assembly. Some well-known or non-path locations can be specified using, such as {GAC}.",
      "type": { "$ref": "#/types/assemblySearchPath" },
      "isList": true
    },
    "AssemblySearchPath_UseAssemblyFolders": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes legacy assembly folders, via the `{AssemblyFolders}` token",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseAssemblyFoldersConfigFileSearchPath": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes `$(AssemblyFoldersConfigFileSearchPath)`, registered in the MSBuild installation",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseCandidateAssemblyFiles": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes assemblies from the current project, via the token `{CandidateAssemblyFiles}`",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseGAC": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes assemblies in the Global Assembly Cache, via the `{GAC}` token",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseHintPathFromItem": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes the `Reference` item's `HintPath` metadata, via the `{HintPathFromItem}` token",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseOutDir": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes the project's output directory",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseRawFileName": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value treats the `Reference` item's `Include` as a file path, via the `{RawFileName}` token",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseReferencePath": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes the `$(ReferencePath)` value",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseRegistry": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes assembly folders registered in the Windows Registry",
      "type": "bool",
      "defaultValue": "true"
    },
    "AssemblySearchPath_UseTargetFrameworkDirectory": {
      "description": "Controls whether the default `$(AssemblySearchPaths)` value includes assemblies from the target framework, via the `{TargetFramework}` token",
      "type": "bool",
      "defaultValue": "true"
    },
    "AccelerateBuildsInVisualStudio": {
      "description": "Indicates whether to enable acceleration when building in Visual Studio (boolean).",
      "type": "bool"
    }
  },
  "metadata": [
    {
      // Metadata that controls how assets are consumed/propagated from a reference
      "$appliesTo": [ "PackageReference", "ProjectReference", "DotNetCliToolReference" ],
      "IncludeAssets": {
        "description": "Assets that will be consumed by the project",
        "defaultValue": "all",
        "type": { "$ref": "#/types/asset" },
        "isList": true,
        "listSeparators": ";,"
      },
      "ExcludeAssets": {
        "description": "Assets that will not be consumed by the project",
        "defaultValue": "none",
        "type": { "$ref": "#/types/asset" },
        "isList": true,
        "listSeparators": ";,"
      },
      "PrivateAssets": {
        "description": "Assets that will be consumed by the project but won't flow to its parent",
        "defaultValue": "contentfiles,analyzers,build",
        "type": { "$ref": "#/types/asset" },
        "isList": true,
        "listSeparators": ";,"
      }
    },
    {
      // Metadata that applies to files that are generated by tools
      "$appliesTo": [ "ApplicationDefinition", "None", "EmbeddedResource", "Content", "Page", "Resource" ],
      "Generator": "Name of any file generator that is run on this item",
      "LastGenOutput": "File that was created by any file generator that was run on this item",
      "CustomToolNamespace": {
        "description": "Namespace into which any file generator that is run on this item should create code",
        "type": "clr-namespace"
      }
    },
    {
      // This technically applies to everything declared outside of a target
      "$appliesTo": [ "Compile", "EmbeddedResource", "Content", "Page", "Resource", "ApplicationDefinition", "None", "BootstrapperFile", "PublishFile", "FileAssociation" ],
      "Visible": {
        "description": "Whether the item should be displayed in the IDE solution tree",
        "type": "bool",
        "defaultValue": "true"
      }
    },
    {
      "$appliesTo": [ "Compile", "EmbeddedResource", "Content", "Page", "Resource", "ApplicationDefinition", "None" ],
      "CopyToOutputDirectory": {
        "description": "Whether to copy the file to the output directory",
        "type": { "values": {
          "Never": "Do not copy the file",
          "Always": "Always copy the file",
          "PreserveNewest": "Copy the file if it is newer than the existing copy"
        }},
        "defaultValue": "Never"
      }
    },
    {
      // No idea what this is
      "$appliesTo": [ "Compile", "EmbeddedResource", "Content", "Page", "Resource", "ApplicationDefinition", "None" ],
      "SubType": ""
    },
    {
      // Some XAML thing maybe?
      "$appliesTo": [ "Content", "Page", "Resource", "ApplicationDefinition", "PublishFile" ],
      "Group": ""
    },
    {
      "$appliesTo": [ "Compile", "EmbeddedResource", "Content", "Page", "Resource", "ApplicationDefinition", "None" ],
      "DependentUpon": "The file under which this file should be grouped in the IDE solution tree"
    },
    {
      // This technically applies to everything declared outside of a target
      "$appliesTo": [ "Compile", "EmbeddedResource", "Content", "Page", "Resource", "ApplicationDefinition", "None" ],
      "Link": "Notional path within project to display if the file is physically located outside of the project file's cone (optional)"
    },
    {
      "$appliesTo": [ "UpToDateCheckInput", "UpToDateCheckOutput", "UpToDateCheckBuilt" ],
        "Set": "Optional group(s) of inputs and outputs that should be considered in isolation during build. Useful when a build involves multiple discrete compilation/transpilation steps. Semicolon-delimited when multiple sets are required.",
        "Kind": "Optional identifier for this item that allows it to be omitted from the fast up-to-date check via a global property."
    }
  ],
  "types": {
    "asset": {
      "name": "asset-type",
      "description": "NuGet package asset type",
      "values": {
        "compile": "Libraries from the `lib` folder",
        "runtime": "Contents of the `runtime` folder",
        "contentFiles": "All of the assets",
        "build": "MSBuild targets",
        "buildMultitargeting": "MSBuild targets in the buildMultitargeting folder",
        "buildTransitive": "MSBuild targets in the buildTransitive folder",
        "analyzers": "Code analyzers",
        "native": "Contents of the `native` folder",
        "none": "None of the assets",
        "all": "All of the assets"
      }
    },
    "publishState": [
      "Default",
      "Included",
      "Excluded",
      "DataFile",
      "Prerequisite"
    ],
    "assemblySearchPath": {
      "description": "Locations to search for assemblies when resolving references",
      "values": {
        "{CandidateAssemblyFiles}" : "Assemblies from the current project",
        "{HintPathFromItem}" : "The assembly indicated by HintPath metadata on the reference item",
        "{TargetFrameworkDirectory}" : "Assemblies in the target framework",
        "{AssemblyFolders}" : "Assemblies in legacy registered assembly folders",
        "{GAC}" : "Assemblies in the .NET Framework Global Assembly Cache",
        "{RawFileName}" : "Treat the reference include as a raw assembly path"
      },
      "allowUnknownValues": true
    },
    "nuGetWarningCode": {
      "description": "Warning codes for NuGet",
      "name": "nuget-warning-code",
      "baseType": "warning-code",
      "values": {

      }
    },
    "project-guid": {
      "allowUnknownValues": true,
      "baseType": "guid",
      "analyzerHints": {
        "GuidFormat": "B"
      }
    },
    "com-guid": {
      "allowUnknownValues": true,
      "baseType": "guid",
      "analyzerHints": {
        "GuidFormat": "B"
      }
    }
  },
  "targets": {
    "Build": "Builds the project",
    "Cleans": "Deletes the project's intermediate and final outputs",
    "Rebuild": "Cleans and then rebuilds the project",
    "Restore": "Restores NuGet packages required to build the project",
    "Publish": "Prepares the project's outputs for distribution and copies them to the publish folder",
    "ResolveReferences": "Resolves the assembly and project references",
    "ResolveAssemblyReferences": "Resolves assembly references to assemblies and satellite files",
    "ResolveProjectReferences": "Builds referenced projects and resolves their outputs",
    "AssignLinkMetadata": "Assigns default values for the `Link` metadata on several item types",
    "AssignProjectConfiguration": "Assigns configurations to project references based on the solution configuration mappings",
    "GetTargetPath": "Called by a referencing project to determine the path to the project's output",
    "PrepareResources": "Prepares resources for the Compile step",
    "AssignTargetPaths": "Assigns `%(TargetPath)` metadata on several item types",
    "ResGen": "Compiles resx resource files",
    "Compile": "Resolves references and compiles the assembly",
    "CoreCompile": "Invokes the compiler to compile the assembly",
    "GenerateTargetFrameworkMonikerAttribute": "Injects a source file containing the TargetFrameworkMonikerAttribute",
    "CreateSatelliteAssemblies": "Creates satellite assemblies for the cultures in the resources",
    "ComputeIntermediateSatelliteAssemblies": "Determines the paths for the satellite assemblies to be created",
    "PrepareForRun": "Copies updated build outputs to the output directory",
    "CopyFilesToOutputDirectory": "Copies updated assemblies and other outputs to the output directory",
    "GetCopyToOutputDirectoryItems": "Gets items to be copied to the output directory from this project and its immediate references",
    "GetCopyToPublishDirectoryItems": "Gets items to be copied to the publish directory from this project and its immediate references",
    "IncrementalClean": "Deletes any files produced by a prior build that are not in the FileWrites items for the current build",
    "CleanReferencedProjects": "Call the Clean target on referenced projects",
    "CleanPublishFolder": "Delete the contents of the publish folder",

    "BeforeCompile": "Runs before the Compile target. Can be safely overridden in project files.",
    "AfterCompile": "Runs after the Compile target. Can be safely overridden in project files.",
    "BeforeBuild": "Runs before the Build target. Can be safely overridden in project files.",
    "AfterBuild": "Runs after the Build target. Can be safely overridden in project files.",
    "BeforeRebuild": "Runs before the Rebuild target. Can be safely overridden in project files.",
    "AfterRebuild": "Runs after the Rebuild target. Can be safely overridden in project files.",
    "BeforeClean": "Runs before the Clean target. Can be safely overridden in project files.",
    "AfterClean": "Runs after the Clean target. Can be safely overridden in project files.",
    "BeforePublish": "Runs before the Publish target. Can be safely overridden in project files.",
    "AfterPublish": "Runs after the Publish target. Can be safely overridden in project files.",
    "BeforeResolveReferences": "Runs before the ResolveReferences target. Can be safely overridden in project files.",
    "AfterResolveReferences": "after before the ResolveReferences target. Can be safely overridden in project files.",
    "BeforeResGen": "Runs before the ResGen target. Can be safely overridden in project files.",
    "AfterResGen": "Runs after the ResGen target. Can be safely overridden in project files."
  }
}