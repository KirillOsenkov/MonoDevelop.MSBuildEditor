{
  // based on https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/reference/msbuild-targets.md
  "license": "Copyright (c) .NET Foundation. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.",
  "items": {
    "BuildOutputInPackage": {
      "description": "Files to be included in the `BuildOutputTargetFolder` within the package, which defaults to `lib`. These items should be created in a target included in the `TargetsForTfmSpecificBuildOutput` property",
      "type": "file",
      "metadata": {
        "FinalOutputPath": {
          "description": "The absolute path of the file to be included. If not specified, the `Identity` will be used.",
          "type": "file"
        },
        "TargetPath": {
          "description": "Optionally set a subfolder and/or name for the file within the `lib/<TargetFramework>` package folder. Defaults to the name of the file."
        }
      }
    },
    "TfmSpecificPackageFile": {
      "description": "Files to be included in package outside the `BuildOutputTargetFolder`. These items should be created in a target included in the `TargetsForTfmSpecificContentInPackage` property",
      "type": "file",
      "metadata": {
        "PackagePath": {
          "description": "Path of the file within the package. Defaults to the project-relative path of the file."
        },
        "BuildAction": {
          "description": "The build action to assign to the file if it is in the `contentFiles` folder. Defaults to `None`.",
          "type": "item-name"
        }
      }
    }
  },
  "properties": {
    "Authors": "A comma-separated list of NuGet packages authors",
    "Company": "Company name for the assembly manifest",
    "Copyright": "Copyright details for the NuGet package",
    "Description": "A long description of the NuGet package for UI display",
    "FileVersion": {
      "description": "Numeric value of the version for the assembly manifest in the format major.minor.build.revision (e.g. 2.4.0.1)",
      "type": "version"
    },
    "InformationalVersion": "Product version of the assembly for UI display (e.g. 1.0 Beta). If not set explicitly, this will be determined from the `Version` property.",
    "NeutralLanguage": {
      "description": "The culture for the NuGet package",
      "type": "culture"
    },
    "PackageIconUrl": {
      "description": "The URL for a 64x64 image with transparent background to use as the icon for the NuGet package in UI display",
      "type": "url",
      "deprecationMessage": "Use `PackageIcon` instead",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#packageiconurl"
    },
    "PackageIcon": {
      "description": "A 64x64 PNG or JPG image to use as the icon for the NuGet package. Relative path within the package.",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#packageicon"
    },
    "PackageId": "The case-insensitive NuGet package identifier, which must be unique across nuget.org or whatever gallery the NuGet package will reside in. IDs may not contain spaces or characters that are not valid for a URL, and generally follow .NET namespace rules.",
    "Title": "A human-friendly title of the package, typically used in UI displays as on nuget.org and the Package Manager in Visual Studio. If not specified, the package ID is used instead.",
    "PackageLicenseUrl": {
      "description": "The URL for the NuGet package's license, often shown in UI displays as well as nuget.org",
      "type": "url",
      "deprecationMessage": "Use PackageLicenseFile or PackageLicenseExpression instead"
    },
    "PackageLicenseFile": {
      "description": "A text file that contains the package's license. Relative path within the package.",
      "type": "file"
    },
    "PackageLicenseExpression": {
      "description": "The package's license in SPDX 2.0 expression format",
      "type": { "$ref": "#/types/spdx" },
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#packing-a-license-expression-or-a-license-file"
    },
    "PackageProjectUrl": {
      "description": "The URL for the NuGet package's home page, often shown in UI displays as well as nuget.org",
      "type": "url"
    },
    "PackageReleaseNotes": "A description of the changes made in this release of the NuGet package, often used in UI like the Updates tab of the Visual Studio Package Manager in place of the package description",
    "PackageRequireLicenseAcceptance": {
      "description": "Value indicating whether the client must prompt the consumer to accept the NuGet package license before installing the package",
      "type": "bool"
    },
    "PackageTags": "A space-delimited list of tags and keywords that describe the NuGet package and aid discoverability of NuGet packages through search and filtering mechanisms",
    "PackageVersion": {
      "description": "Numeric value of the NuGet package version in the format major.minor.patch pattern (e.g. 1.0.1), with optional pre-release suffix (e.g. 1.0.1-beta). If not set explicitly, this will be determined from the `Version` property.",
      "type": "version-suffixed"
    },
    "Product": "Product name information for the assembly manifest",
    "Version": {
      "description": "Numeric value of the version in the format major.minor.patch (e.g. 2.4.0), with optional pre-release suffix (e.g. 1.0.1-beta). This will be used to determine the values of the `PackageVersion`, `AssemblyVersion` and `InformationalVersion` properties if they are not set explicitly.",
      "type": "version-suffixed"
    },
    "VersionPrefix": {
      "description": "When `Version` is not specified, `VersionPrefix` represents the first fragment of the version string (e.g. 1.0.0). The syntax is `VersionPrefix[-VersionSuffix]`.",
      "type": "version"
    },
    "VersionSuffix": "When `Version` is not specified, `VersionSuffix` represents the second fragment of the version string (e.g. beta). The syntax is `VersionPrefix[-VersionSuffix]`.",
    "PackageType": {
      "description": "The type of the package",
      "helpUrl": "https://learn.microsoft.com/nuget/create-packages/set-package-type",
      "isList": true,
      // uses semicolon for multiple package types, comma to separate a packagetype and its optional version
      "listSeparators": ";",
      "type": { "$ref": "#/types/packageType" }
    },
    "IncludeBuildOutput": {
      "description": "Whether to include the build output in the package",
      "type": "bool"
    },
    "BuildOutputTargetFolder": {
      "description": "The package folder into which the build output should be placed",
      "defaultValue": "lib"
    },
    "IncludeSymbols": {
      "description": "Whether to include symbols in the NuGet package",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#includesymbols"
    },
    "IncludeSource": {
      "description": "Whether to include source files in the NuGet package",
      "type": "bool",
      "defaultValue": "false",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#includesource"
    },
    "IsTool": {
      "description": "Whether to place output files in the tools folder instead of the lib folder",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#istool"
    },
    "NuspecFile": {
      "description": "Relative or absolute path to a custom .nuspec package manifest",
      "type": "file",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#packing-using-a-nuspec-file"
    },
    "NuspecProperties": {
      "description": "Semicolon-separated list of key=value pairs to be set in a custom .nuspec manifest",
      "type": "string",
      "isList": true
    },
    "NuspecBasePath": {
      "description": "Base path for the custom .nuspec manifest",
      "type": "folder"
    },
    "IncludeContentInPack": {
      "description": "Whether to include Content files in the package",
      "type": "bool",
      "defaultValue": "true"
    },
    "IsPackable": {
      "description": "Indicates whether the project can be used to create a NuGet package.",
      "type": "bool"
    },
    "PackAsTool": {
      "description": "Indicate whether the NuGet package should be configured as a .NET tool suitable for use with `dotnet tool install`.",
      "type": "bool"
    },
    "PackageOutputPath": "Path to the output folder for the package generated when calling Pack.",
    "GeneratePackageOnBuild": {
      "description": "Value indicating whether a NuGet package will be generated when the project is built",
      "type": "bool"
    },
    "ToolCommandName": "Specifies the command that will invoke the tool after it's installed.",
    "PackRelease": {
      "description": "Value indicating whether to generate a release build of the package",
      "type": "bool",
      "helpUrl": "https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#packrelease"
    },
    "PackageReadmeFile": {
      "description": "Path of the README file within the package. This property will not cause the file to be included in the package.",
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#packagereadmefile"
    },
    "TargetsForTfmSpecificBuildOutput": {
      "description": "List of custom targets to gather additional `BuildOutputInPackage` items to include in the package in the `BuildOutputTargetFolder` in the package (`lib` by default).",
      "type": "target-name",
      "isList": true,
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#targetsfortfmspecificbuildoutput"
    },
    "TargetsForTfmSpecificContentInPackage": {
      "description": "List of custom targets to gather additional `TfmSpecificPackageFile` items to include in the package outside the `BuildOutputTargetFolder`.",
      "type": "target-name",
      "isList": true,
      "helpUrl": "https://learn.microsoft.com/nuget/reference/msbuild-targets#targetsfortfmspecificcontentinpackage"
    }
  },
  "metadata": [
    {
      // Metadata that controls how an item is packaged
      "$appliesTo": [
        "Content",
        "Compile",
        "EmbeddedResource",
        "ApplicationDefinition",
        "Page",
        "Resource",
        "SplashScreen",
        "DesignData",
        "DesignDataWithDesignTimeCreateableTypes",
        "CodeAnalysisDictionary",
        "AndroidAsset",
        "AndroidResource",
        "BundleResource",
        "None"
      ],
      "Pack": {
        "description": "Whether to include the item in the NuGet package",
        "type": "bool"
      },
      "PackagePath": {
        "description": "The item's path within the package. If it has a trailing slash, the filename will be appended.",
        "type": "file-or-folder"
      },
      "PackageCopyToOutput": {
        "description": "Sets CopyToOutput on the contentFiles entry in the output nuspec",
        "type": "bool"
      },
      "PackageFlatten": {
        "description": "Sets Flatten on the contentFiles entry in the output nuspec",
        "type": "bool"
      }
    },
    {
      "$appliesTo": "ProjectReference",
      "TreatAsPackageReference": {
        "description": "Whether to treat this project reference as a package reference in the output package",
        "type": "bool"
      }
    }
  ],
  "types": {
    "asset": {
      "name": "asset-type",
      "description": "NuGet package asset type",
      "values": {
        "compile": "Libraries from the `lib` folder",
        "runtime": "Contents of the `runtime` folder",
        "contentFiles": "All of the assets",
        "build": "MSBuild targets",
        "buildMultitargeting": "MSBuild targets in the buildMultitargeting folder",
        "buildTransitive": "MSBuild targets in the buildTransitive folder",
        "analyzers": "Code analyzers",
        "native": "Contents of the `native` folder",
        "none": "None of the assets",
        "all": "All of the assets"
      }
    },
    "spdx": {
      "name": "spdx-expression",
      "allowUnknownValues": true,
      // Instead of the entire list, just include some common permissive OSI-approved licenses
      "values": {
        "MIT": "MIT License",
        "Apache-1.1": "Apache License 1.1",
        "Apache-2.0": "Apache License 2.0",
        "BSD-2-Clause": "BSD 2-Clause \"Simplified\" License",
        "BSD-2-Clause-Patent": "BSD-2-Clause Plus Patent License",
        "BSD-3-Clause": "BSD 3-Clause \"New\" or \"Revised\" License"
      }
    },
    "packageType": {
      // todo: custom validator regex so we don't fail on versioned package types
      "allowUnknownValues": true,
      "values": {
        "DotNetCliTool": {
          "description": ".NET project tool",
          "deprecationMessage": "Replaced by local tools in .NET 5+. Use `DotNetTool` instead."
        },
        "Dependency": "Default type for NuGet packages",
        "MSBuildSdk": "MSBuild project SDK",
        "DotNetTool": ".NET Tool"
      }
    }
  },
  "targets": {
    "Pack": "Pack the project's outputs into a NuGet package"
  }
}